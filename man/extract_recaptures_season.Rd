% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/process_data.R
\name{extract_recaptures_season}
\alias{extract_recaptures_season}
\title{#' Converts a field to a date in R
#'
#' Takes a dataframe and converts one of the columns to R date format and creates
#' the CCAMLR month (Dec=1, ... Nov=12)
#' @param data CCAMLR data extract
#' @param column name of the field to convert to a date
#' @param splitdate if TRUE then calander months and ccamlr months will be generated
#' @param prefix a prefix to be added to the new field names
#' @param ... additional arguments
#' @export
process_date <- function(data, column, prefix = NULL, ...){
  if(!is.null(prefix)) prefix <- paste0(prefix, "_")
  ## return specified Date column in desired date format
  data[[column]]<- as.Date(data[[column]],"%Y-%m-%d %H:%M:%S",tz="UTC")
  ## take the data and create a date field from the specified column
  data[paste0(prefix, "Date")] <- as.Date(data[[column]],"%Y-%m-%d %H:%M:%S",tz="UTC")
  data[paste0(prefix, "Month_full")] <- months(data[[paste0(prefix, "Date")]], abbreviate = TRUE)
  ## http://stackoverflow.com/questions/6549239/convert-mmm-to-numeric-in-r
  data[paste0(prefix, "Month")] <- match(data[[paste0(prefix, "Month_full")]], month.abb)
  data[paste0(prefix, "CCAMLR_Month")] <- data[[paste0(prefix, "Month")]] %% 12 + 1
  ## return the data
  data
}
#' Process CCAMLR csv data extract
#'
#' Process CCAMLR csv data extract for use in Chapman estimate of biomass
#'
#' @param data CCAMLR data extract
#' @param location either a ASD code or a research block (must be character format)
#' @param species either "TOA" or "TOP"
#' @param select fields to select in the data (default = NULL selects all fields)
#' @param seasons vector of CCAMLR fishing seasons
#' @param ... additional arguments
#' @aliases process_releases process_recaptures
#' @export
process_catch_chapman <- function(data, isNA, location=NULL, species=NULL, seasons=NULL, select=NULL, ...){
  ## some checks
  if(!is.null(location)){
    if(is.integer0(grep("_", location))){
      ## if no '_' then location is an ASD_CODE
      d <- data[data[["ASD_CODE"]] %in% location, select]
    }else if(length(grep("_", location)==1)){
      ## if 1 and only 1 '_' then location is a RESEARCH_BLOCK
      d <- data[data[["RESEARCH_BLOCK_CODE_START_SET"]] %in% location, select]
    }else stop("Incorrect location format specified")
  }
  if(!is.null(species)){
    if(length(species) >1) stop("only one species may currently be specified")
    if(!species %in% c("TOA", "TOP")) stop("species must be either 'TOA' or 'TOP'") 
    d <- data[data[["SPECIES_CODE"]] %in% species, select]
  }
  
  ## if no fields specified select columns
  if(is.null(select)) select <- names(data)
  ## extract either a RB or ASD depending on how location is specified
 
  ## create an R date field
  d <- process_date(d, column="SET_START_DATE")
  ## return the data
  d
}
#' @export
process_releases <- function(data, location, species, seasons, select=NULL, ...){
  ## some checks
  if(length(location) > 1) stop("only one location may currently be specified")
  if(length(species) > 1) stop("only one species may currently be specified")
  if(!species %in% c("TOA", "TOP")) stop("species must be either 'TOA' or 'TOP'")
  ## if no fields specified select columns
  if(is.null(select)) select <- names(data)
  ## extract either a RB or ASD depending on how location is specified
  if(is.integer0(grep("_", location))){
    ## if no '_' then location is an ASD_CODE
    d <- data[data[["SPECIES_CODE"]] %in% species &
                data[["ASD_CODE"]] %in% location, select]
  }else if(length(grep("_", location)==1)){
    ## if 1 and only 1 _ then location is a RESEARCH_BLOCK
    d <- data[data[["SPECIES_CODE"]] %in% species &
                data[["RESEARCH_BLOCK_CODE"]] %in% location, select]
  }else stop("Incorrect location format specified")
  ## create an R date field
  d <- process_date(d, column="DATE_TAGGED")
  ## return the data
  d
}
#' @export
#' @rdname process_catch
process_recaptures <- function(data, location, species, select=NULL, ...){
  ## some checks
  if(length(location) > 1) stop("only one location may currently be specified")
  if(length(species) > 1) stop("only one species may currently be specified")
  if(!species %in% c("TOA", "TOP")) stop("species must be either 'TOA' or 'TOP'")
  ## if no fields specified select columns
  if(is.null(select)) select <- names(data)
  ## extract either a RB or ASD depending on how location is specified
  if(is.integer0(grep("_", location))){
    ## if no '_' then location is an ASD_CODE
    d <- data[data[["SPECIES_CODE_RECAPTURE"]] %in% species &
                data[["ASD_CODE_RELEASE"]] %in% location &
                data[["ASD_CODE_RECAPTURE"]] %in% location, select]
  }else if(length(grep("_", location)==1)){
    ## if 1 and only 1 _ then location is a RESEARCH_BLOCK
    d <- data[data[["SPECIES_CODE_RECAPTURE"]] %in% species &
                data[["RESEARCH_BLOCK_CODE_RELEASE"]] %in% location &
                data[["RESEARCH_BLOCK_CODE_RECAPTURE"]] %in% location, select]
  }else stop("Incorrect location format specified")
  ## create date fields for release and recapture
  d <- process_date(d, column="DATE_TAGGED", prefix="Release")
  d <- process_date(d, column="DATE_RECAPTURED", prefix="Recapture")
  ## return the data
  d
}
#' Extract releases
#'
#' Extract release data for calculation of biomass
#' @param data recapture data with fields SEASON and CCAMLR_Month
#' @param seasons vector of seasons
#' @param ... additional arguments
#' @export
extract_releases <- function(data, seasons, ...){
  ## define the number of months
  n_months <- 12 #* could drop months
  ## define a matrix to store the recaptures
  rels <- matrix(0, length(seasons), n_months)
  rownames(rels) <- seasons
  ## loop to fill the matrix
  for(i in 1:length(seasons)){
    for(j in 1:n_months){
      rels[i, j] <- nrow(data[data[["SEASON"]] == seasons[i] &
                                data[["CCAMLR_Month"]] == j,])
    }
  }
  #* consider adding a class
  ## return the matrix of releases
  rels
}
Extract recaptures Season}
\usage{
extract_recaptures_season(data, rel_seasons)
}
\arguments{
\item{data}{tag release and recapture data with fields SEASON_RELEASE,
SEASON_RECAPTURE}

\item{rel_seasons}{vector of tag release seasons}

\item{...}{additional arguments}
}
\description{
Extract recapture data for calculation of biomass for a CCAMLR Season
}
